server.js

const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bodyParser = require('body-parser');
const jwt = require('jsonwebtoken');
const secret = 'bc6245bb8f7b9f164101f07918dac4cd9eb0aac666aba5c8c8be370174c2369ae79b60b92d98ed20e54643fae0331845543b514a2772bbabc78cc6190045e21b';
const app = express();
const port = 5000;

app.use(cors());
app.use(bodyParser.json());

mongoose.connect('mongodb://localhost:27017/project2', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});
const userSchema =new mongoose.Schema({
  username:{type:String,unique:true},
  password:String
})
const questionSchema = new mongoose.Schema({
  question: String,
  options: [String],
  answer: String,
  category: String,
});

//update 1: start
// const questionSchema = new mongoose.Schema({
//   question: String,
//   options: [String],
//   answer: String,
//   category: String,
//   subtopic: String, // New field for subtopics
// });
//update 1 : end

const User=mongoose.model('User', userSchema)
const Question = mongoose.model('Question', questionSchema);

app.post('/add-question', async (req, res) => {
  const { question, options, answer, category } = req.body;
  const newQuestion = new Question({ question, options, answer, category });
  await newQuestion.save();
  res.send('Question added!');
});

app.get('/categories', async (req, res) => {
  const categories = await Question.distinct('category');
  res.json(categories);
});

app.get('/questions', async (req, res) => {
  const questions = await Question.find();
  res.json(questions);
});

// update 4 : start
app.get('/questions/:category', async (req, res) => {
  const { category } = req.params;
  const questions = await Question.find({ category });
  res.json(questions);
});

// app.get('/questions/:category', async (req, res) => {
//   const { category } = req.params;
//   const { subtopic } = req.query; // Get optional subtopic from query

//   const filter = { category };
//   if (subtopic) filter.subtopic = subtopic; // Add subtopic to filter if provided

//   const questions = await Question.find(filter);
//   res.json(questions);
// });
//update 4 : end

// Register
app.post('/register', async (req, res) => {
  const { username, password } = req.body;
  try {
    const newUser = new User({ username, password }); // Save plain text password
    await newUser.save();
    res.send('User registered!');
  } catch (error) {
    console.error('Registration error:', error);
    res.status(500).send('Error registering user');
  }
});

// Login
app.post('/login', async (req, res) => {
  const { username, password } = req.body;
  try {
    const user = await User.findOne({ username });
    if (!user || user.password !== password) {
      return res.status(401).send('Invalid credentials');
    }
    const token = jwt.sign({ userId: user._id }, secret, { expiresIn: '1h' });
    res.json({ token });
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).send('Error logging in');
  }
});

// Middleware to authenticate user
const authenticate = (req, res, next) => {
  const token = req.headers.authorization?.split(' ')[1];
  if (token) {
    jwt.verify(token, secret, (err, decoded) => {
      if (err) {
        return res.status(401).send('Unauthorized');
      } else {
        req.userId = decoded.userId;
        next();
      }
    });
  } else {
    res.status(401).send('Unauthorized');
  }
};

const progressSchema = new mongoose.Schema({
  userId: mongoose.Schema.Types.ObjectId,
  category: String,
  correctAnswers: Number,
  wrongAnswers: Number,
});

const Progress = mongoose.model('Progress', progressSchema);

app.post('/save-progress', authenticate, async (req, res) => {
  const { category, correctAnswers, wrongAnswers } = req.body;
  const progress = new Progress({
    userId: req.userId,
    category,
    correctAnswers,
    wrongAnswers,
  });
  await progress.save();
  res.send('Progress saved!');
});

app.get('/progress', authenticate, async (req, res) => {
  const progress = await Progress.find({ userId: req.userId });
  res.json(progress);
});

//update 2 : start
// app.get('/subtopics/:category', async (req, res) => {
//   const { category } = req.params;
//   const subtopics = await Question.distinct('subtopic', { category });
//   res.json(subtopics);
// });
//update 2 : end

//update 6 : start
// app.get('/subtopics/:category', async (req, res) => {
//   const { category } = req.params;
//   const subtopics = await Question.distinct('subtopic', { category }); // Adjust according to your schema
//   res.json(subtopics);
// });
//update 6 : end

app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});


Add-Question.jsx
import React, { useState } from 'react';
import axios from 'axios';

const AddQuestion = () => {
  const [question, setQuestion] = useState('');
  const [options, setOptions] = useState(['', '', '', '']);
  const [answer, setAnswer] = useState('');
  const [category, setCategory] = useState('');

  const handleOptionChange = (index, value) => {
    const newOptions = [...options];   // Create a copy of the current options array
    newOptions[index] = value;   // Update the specific index with the new value
    setOptions(newOptions);   // Update the state with the new options array
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    await axios.post('http://localhost:5000/add-question', {
      question,
      options,
      answer,
      category,
    });
    setQuestion('');
    setOptions(['', '', '', '']);
    setAnswer('');
    setCategory('');
  };

  return (
    <div className="add-question-container">
      <h1 className="title">Add Question</h1>
      <form onSubmit={handleSubmit} className="form">
        <div className="form-group">
          <input
            type="text"
            placeholder="Question"
            value={question}
            onChange={(e) => setQuestion(e.target.value)}
            className="input-field"
          />
        </div>
        {options.map((option, index) => (
          <div key={index} className="form-group">
            <input
              type="text"
              placeholder={`Option ${index + 1}`}
              value={option}
              onChange={(e) => handleOptionChange(index, e.target.value)}
              className="input-field"
            />
          </div>
        ))}
        <div className="form-group">
          <input
            type="text"
            placeholder="Answer"
            value={answer}
            onChange={(e) => setAnswer(e.target.value)}
            className="input-field"
          />
        </div>
        <div className="form-group">
          <input
            type="text"
            placeholder="Category"
            value={category}
            onChange={(e) => setCategory(e.target.value)}
            className="input-field"
          />
        </div>
        <button type="submit" className="submit-button">Add Question</button>
      </form>
    </div>
  );
};

export default AddQuestion;

Dashboard.jsx

import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';

const Dashboard = () => {
  const [categories, setCategories] = useState([]);
  const navigate = useNavigate();
  const token = localStorage.getItem('token');

  useEffect(() => {
    if (!token) {
      navigate('/login'); // Redirect to login if not authenticated
      return;
    }

    const fetchCategories = async () => {
      const res = await axios.get('http://localhost:5000/categories', {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      setCategories(res.data);
    };

    fetchCategories();
  }, [token, navigate]);

  const handleCategoryClick = (category) => {
    navigate(`/quiz/${category}`);
  };

  return (
    <div className="dashboard">
      <h1 className="title">Quiz Categories</h1>
      <div className="category-grid">
        {categories.map((category) => (
          <div key={category} className="category-card" onClick={() => handleCategoryClick(category)}>
            <h2 className="category-name">{category}</h2>
          </div>
        ))}
      </div>
    </div>
  );
};

export default Dashboard;

Navbar.jsx
import React from 'react';
import { Link } from 'react-router-dom';

const Navbar = () => {
  const token = localStorage.getItem('token');

  return (
    <div className="navbar-container">
      <nav className="navbar">
        <ul className="navbar-list">
          <li className="navbar-item"><Link to="/about" className="navbar-link">About Us</Link></li> {/* Add About Us link */}
          {!token ? (
            <>
              <li className="navbar-item"><Link to="/register" className="navbar-link">Register</Link></li>
              <li className="navbar-item"><Link to="/login" className="navbar-link">Login</Link></li>
            </>
          ) : (
            <>
              <li className="navbar-item"><Link to="/user-dashboard" className="navbar-link">User Dashboard</Link></li>
              <li className="navbar-item"><Link to="/" className="navbar-link">Logout</Link></li>
            </>
          )}
        
        </ul>
      </nav>
    </div>
  );
};

export default Navbar;

Quiz.jsx
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';

const Quiz = () => {
  //update 5 : start 
  const { category, subtopic } = useParams();
  useEffect(() => {
    const fetchQuestions = async () => {
      const res = await axios.get(`http://localhost:5000/questions/${category}?subtopic=${subtopic}`);
      setQuestions(res.data);
    };

    fetchQuestions();
  }, [category, subtopic]);
  
 // const { category } = useParams();
  // update 5 : end
  const [questions, setQuestions] = useState([]);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [score, setScore] = useState(0);
  const [showResult, setShowResult] = useState(false);
  const [correctAnswers, setCorrectAnswers] = useState(0);
  const [wrongAnswers, setWrongAnswers] = useState(0);
  const [timeLeft, setTimeLeft] = useState(60); // Set timer to 60 seconds can be adjestd as needed(adjust as needed)
  const [attemptedQuestions, setAttemptedQuestions] = useState([]);
  const [fullScreenWarnings, setFullScreenWarnings] = useState(0); // Track the number of full-screen exits
  const [isWarningVisible, setIsWarningVisible] = useState(false); // Control visibility of warning
  const navigate = useNavigate();
  

  useEffect(() => {
    const fetchQuestions = async () => {
      const res = await axios.get(`http://localhost:5000/questions/${category}`);
      setQuestions(res.data);
    };
    fetchQuestions();
    enterFullScreen();
    monitorFullScreenExit();
  }, [category]);

  useEffect(() => {
    if (timeLeft > 0) {
      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
      return () => clearTimeout(timer);
    } else {
      handleQuizSubmit();
    }
  }, [timeLeft]);

  // Handle when a question is answered
  const handleAnswerOptionClick = (option) => {
    if (!attemptedQuestions.includes(currentQuestion)) {
      setAttemptedQuestions([...attemptedQuestions, currentQuestion]);
    }

    if (option === questions[currentQuestion].answer) {
      setScore(score + 1);
      setCorrectAnswers(correctAnswers + 1);
    } else {
      setWrongAnswers(wrongAnswers + 1);
    }

    const nextQuestion = currentQuestion + 1;
    if (nextQuestion < questions.length) {
      setCurrentQuestion(nextQuestion);
    }
  };

  const handleQuestionNavigation = (index) => {
    setCurrentQuestion(index);
  };

  const saveProgress = async () => {
    const token = localStorage.getItem('token');
    await axios.post(
      'http://localhost:5000/save-progress',
      {
        category,
        correctAnswers,
        wrongAnswers,
      },
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );
  };

  // Restart the quiz
  const restartQuiz = () => {
    setCurrentQuestion(0);
    setScore(0);
    setShowResult(false);
    setAttemptedQuestions([]);
    setTimeLeft(60); // Reset timer to 60 seconds (adjust as needed)
    navigate('/');
  };

  // Handle quiz submission
  const handleQuizSubmit = () => {
    setShowResult(true);
    saveProgress();
    exitFullScreen();
  };

  // Enter full screen mode
  const enterFullScreen = () => {
    const elem = document.documentElement;
    if (elem.requestFullscreen) {
      elem.requestFullscreen();
    } else if (elem.mozRequestFullScreen) { /* Firefox */
      elem.mozRequestFullScreen();
    } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari & Opera */
      elem.webkitRequestFullscreen();
    } else if (elem.msRequestFullscreen) { /* IE/Edge */
      elem.msRequestFullscreen();
    }
  };

  // Exit full screen mode
  const exitFullScreen = () => {
    if (document.exitFullscreen) {
      document.exitFullscreen();
    } else if (document.mozCancelFullScreen) { /* Firefox */
      document.mozCancelFullScreen();
    } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */
      document.webkitExitFullscreen();
    } else if (document.msExitFullscreen) { /* IE/Edge */
      document.msExitFullscreen();
    }
  };

  // Monitor full-screen mode changes
  const monitorFullScreenExit = () => {
    document.addEventListener('fullscreenchange', checkFullScreenExit);
    document.addEventListener('webkitfullscreenchange', checkFullScreenExit);
    document.addEventListener('mozfullscreenchange', checkFullScreenExit);
    document.addEventListener('MSFullscreenChange', checkFullScreenExit);
  };

  // Check if the user has exited full-screen mode
  const checkFullScreenExit = () => {
    if (!document.fullscreenElement && !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement) {
      handleFullScreenExit();
    }
  };

  // Handle full-screen exit event
  const handleFullScreenExit = () => {
    setFullScreenWarnings((prevWarnings) => {
      const newWarnings = prevWarnings + 1;
      setIsWarningVisible(true);

      // Hide the warning after 2 seconds
      setTimeout(() => {
        setIsWarningVisible(false);
      }, 2000);

      // Automatically submit the quiz if the user exits full-screen more than twice
      if (newWarnings > 0) {
        handleQuizSubmit();
      }
      return newWarnings;
    });
  };

  const totalQuestions = questions.length;
  const attemptedCount = attemptedQuestions.length;
  const unattemptedCount = totalQuestions - attemptedCount;

  return (
    <div className="quiz-container">
      {showResult ? (
        <div className="result-section">
          <h1>Your Score: {score}</h1>
          <button className="restart-button" onClick={restartQuiz}>
            Restart Quiz
          </button>
        </div>
      ) : (
        <div className="quiz-content">
          {isWarningVisible && (
            <div className="warning-message">
              <p>Warning: Please stay in full-screen mode! {fullScreenWarnings}/2 warnings</p>
            </div>
          )}
          <div className="left-sidebar">
            <h3>Questions</h3>
            <ul className="question-list">
              {questions.map((_, index) => (
                <li key={index}>
                  <button
                    className={`question-number ${
                      attemptedQuestions.includes(index) ? 'attempted' : ''
                    }`}
                    onClick={() => handleQuestionNavigation(index)}
                  >
                    {index + 1}
                  </button>
                </li>
              ))}
            </ul>
            <div className="stats">
              <p>Attempted: {attemptedCount}</p>
              <p>Unattempted: {unattemptedCount}</p>
            </div>
          </div>
          <div className="question-section">
            {questions.length > 0 && (
              <>
                <h1 className="question-text">
                  {questions[currentQuestion].question}
                </h1>
                <div className="timer">Time Left: {timeLeft} seconds</div>
                <div className="options-container">
                  {questions[currentQuestion].options.map((option, index) => (
                    <button
                      key={index}
                      className="option-button"
                      onClick={() => handleAnswerOptionClick(option)}
                    >
                      {option}
                    </button>
                  ))}
                </div>
                <button className="submit-button" onClick={handleQuizSubmit}>
                  Submit Quiz
                </button>
              </>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default Quiz;

UserDashboard.jsx
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Bar } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';

// Register the required chart.js components
ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

const UserDashboard = () => {
  const [progress, setProgress] = useState([]);
  const [chartData, setChartData] = useState({
    labels: [],
    datasets: [
      {
        label: 'Correct Answers',
        data: [],
        backgroundColor: 'rgba(75, 192, 192, 0.6)',
      },
      {
        label: 'Wrong Answers',
        data: [],
        backgroundColor: 'rgba(255, 99, 132, 0.6)',
      },
    ],
  });

  useEffect(() => {
    const fetchProgress = async () => {
      const token = localStorage.getItem('token');
      try {
        const res = await axios.get('http://localhost:5000/progress', {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        setProgress(res.data);
        updateChartData(res.data);
      } catch (error) {
        console.error('Error fetching progress:', error);
      }
    };

    fetchProgress();
  }, []);

  const updateChartData = (data) => {
    const labels = data.map(item => item.category);
    const correctAnswers = data.map(item => item.correctAnswers);
    const wrongAnswers = data.map(item => item.wrongAnswers);

    setChartData({
      labels,
      datasets: [
        {
          label: 'Correct Answers',
          data: correctAnswers,
          backgroundColor: 'rgba(75, 192, 192, 0.6)',
        },
        {
          label: 'Wrong Answers',
          data: wrongAnswers,
          backgroundColor: 'rgba(255, 99, 132, 0.6)',
        },
      ],
    });
  };

  return (
    <div className="user-dashboard">
      <h1>Your Quiz Progress</h1>
      <table>
        <thead>
          <tr>
            <th>Category</th>
            <th>Correct Answers</th>
            <th>Wrong Answers</th>
            <th>Progress (%)</th>
          </tr>
        </thead>
        <tbody>
          {progress.map((item) => (
            <tr key={item._id}>
              <td>{item.category}</td>
              <td>{item.correctAnswers}</td>
              <td>{item.wrongAnswers}</td>
              <td>{((item.correctAnswers / (item.correctAnswers + item.wrongAnswers)) * 100).toFixed(2)}%</td>
            </tr>
          ))}
        </tbody>
      </table>

      <div className="chart-container">
        <h2>Quiz Progress Overview</h2>
        <Bar data={chartData} options={{ responsive: true, maintainAspectRatio: false }} />
      </div>
    </div>
  );
};

export default UserDashboard;

App.jsx
import React from 'react';
import { createBrowserRouter, RouterProvider, Navigate } from 'react-router-dom';
import './App.css';
import Navbar from './components/Navbar';
import Quiz from './components/Quiz';
import AddQuestion from './components/AddQuestion';
import Dashboard from './components/Dashboard';
import Register from './components/Register';
import Login from './components/Login';
import UserDashboard from './components/UserDashboard';
import AboutUs from './components/AboutUs'; 
import PrivateRoute from './components/PrivateRoute';
import Header from './components/Header';
import Contact from './components/Contact';


function App() {
  const router = createBrowserRouter([
    {
      path: '/',
      element: <Navigate to="/register" />, // Redirect to register page
    },
    {
      path: '/quiz/:category',
      element: (
        <>
          <Navbar />
          <Quiz />
        </>
      ),
    },
    {
      path: '/add-question',
      element: (
        <>
          <Navbar />
          <AddQuestion />
        </>
      ),
    },
    {
      path: '/dashboard',
      element: (
        <>
          <Navbar />
          <PrivateRoute element={Dashboard} />
        </>
      ),
    },
    {
      path: '/register',
      element: (
        <>
          <Register />
        </>
      ),
    },
    {
      path: '/login',
      element: (
        <>
          <Login />
        </>
      ),
    },
    {
      path: '/user-dashboard',
      element: (
        <>
          <Navbar />
          <PrivateRoute element={UserDashboard} />
        </>
      ),
    },
    {
      path: '/about', // New route for About Us
      element: (
        <>
          <Navbar />
          <AboutUs /> {/* Render the About Us component */}
        </>
      ),
    },
    {
      path:'/header',
      element: (
        <>
          <Header />
        </>
      )
    },
    {
      path:'/contact',
      element: (
        <>
          <Contact />
        </>
      )
    }
    
  ]);

  return <RouterProvider router={router} />;
}

export default App;

css for dashboard 
.dashboard {
  max-width: 1200px;
  margin: 50px auto;
  padding: 20px;
  background: linear-gradient(135deg, #f3f3f3, #e9ecef);
  border-radius: 12px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
}

/* Title Styling */
.title {
  text-align: center;
  font-size: 3.5em;
  font-weight: bold;
  color: #2c3e50;
  margin-bottom: 40px;
  letter-spacing: 2px;
  text-transform: uppercase;
  position: relative;
}

.title::after {
  content: '';
  position: absolute;
  bottom: -10px;
  left: 50%;
  transform: translateX(-50%);
  width: 120px;
  height: 4px;
  background-color: #3498db;
  border-radius: 10px;
}

/* Category Grid */
.category-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 20px;
  justify-items: center;
}

/* Category Card */
.category-card {
  width: 100%;
  height:100%;
  max-width: 250px;
  max-height: 500px;  
  background: #ffffff;
  border-radius: 15px;
  overflow: hidden;
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  cursor: pointer;
  transition: transform 0.4s ease, box-shadow 0.4s ease;
  position: relative;
}

.category-card:hover {
  transform: translateY(-12px);
  box-shadow: 0 12px 35px rgba(0, 0, 0, 0.25);
}

.category-image {
  width: 100%;
  height: 160px;
  object-fit: cover;
  border-bottom: 3px solid #3498db;
}

/* Category Name Styling */
.category-name {
  text-align: center;
  font-size: 1.75em;
  color: #3498db;
  margin: 20px 0;
  font-weight: bold;
  transition: color 0.3s ease;
  text-transform: capitalize;
}

.category-card:hover .category-name {
  color: #2980b9;
}

/* Add subtle shadow effect on hover */
.category-card:hover .category-image {
  filter: brightness(0.9);
  transition: filter 0.3s ease;
}

/* Responsive Design */
@media (max-width: 768px) {
  .title {
    font-size: 2.5em;
  }

  .category-card {
    max-width: 180px;
  }

  .category-name {
    font-size: 1.4em;
  }
}

@media (max-width: 480px) {
  .title {
    font-size: 2em;
  }

  .category-card {
    max-width: 150px;
  }

  .category-name {
    font-size: 1.2em;
  }
}

aboutus css
.about-us {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding: 50px 20px;
  background: linear-gradient(135deg, #00c6ff, #0072ff); /* Stunning blue gradient */
  color: #ffffff;
  font-family: 'Poppins', sans-serif;
  min-height: 100vh;
}

/* Heading Styling */
.about-us h1 {
  font-size: 3rem;
  text-align: center;
  margin-bottom: 20px;
  font-weight: 700;
  background: -webkit-linear-gradient(45deg, #ffcc70, #f83600);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  letter-spacing: 2px;
  animation: slideInDown 1s ease-out;
}

/* Section Heading Styling */
.about-us h2 {
  font-size: 2rem;
  margin-top: 30px;
  text-align: center;
  color: #f0e68c;
  position: relative;
}

.about-us h2::after {
  content: '';
  width: 50px;
  height: 3px;
  background-color: #ffcc70;
  display: block;
  margin: 10px auto 0;
  border-radius: 10px;
}

/* Paragraph Styling */
.about-us p {
  max-width: 800px;
  text-align: center;
  line-height: 1.8;
  font-size: 1.2rem;
  color: #f0f8ff;
  margin-bottom: 20px;
  opacity: 0;
  animation: fadeIn 2s forwards;
}

.about-us ul {
  margin: 20px 0;
  padding: 0;
  list-style: none;
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
}

.about-us li {
  margin: 10px 20px;
  font-size: 1.2rem;
  background: rgba(255, 255, 255, 0.1);
  padding: 10px 20px;
  border-radius: 20px;
  color: #f0f8ff;
  border: 1px solid rgba(255, 255, 255, 0.3);
  box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease;
}

.about-us li:hover {
  transform: translateY(-10px);
  box-shadow: 0px 12px 24px rgba(0, 0, 0, 0.2);
}

/* Subscription Model Cards */
.subscription-models {
  display: flex;
  justify-content: center;
  flex-wrap: wrap;
  gap: 20px;
  margin-top: 30px;
}

.subscription-models h3 {
  font-size: 1.6rem;
  color: #ffcc70;
  margin-bottom: 15px;
  text-align: center;
}

.subscription-models p {
  background-color: rgba(255, 255, 255, 0.1);
  padding: 20px;
  border-radius: 15px;
  box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.2);
  max-width: 300px;
  color: #f0f8ff;
  font-size: 1rem;
  text-align: center;
  transition: transform 0.3s ease, background-color 0.3s ease;
}

.subscription-models p:hover {
  background-color: rgba(255, 255, 255, 0.2);
  transform: scale(1.05);
}

/* Animations */
@keyframes slideInDown {
  from {
    opacity: 0;
    transform: translateY(-100px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeIn {
  to {
    opacity: 1;
  }
}

/* Responsive Design */
@media (max-width: 768px) {
  .about-us h1 {
    font-size: 2.5rem;
  }

  .about-us h2 {
    font-size: 1.8rem;
  }

  .about-us p {
    font-size: 1rem;
  }

  .subscription-models p {
    max-width: 100%;
    padding: 15px;
  }
}

@media (max-width: 480px) {
  .about-us h1 {
    font-size: 2rem;
  }

  .about-us h2 {
    font-size: 1.6rem;
  }

  .about-us p {
    font-size: 0.9rem;
  }
}


Quiz.jsx 2

import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';

const Quiz = () => {
  //update 5 : start 
  const { category, subtopic } = useParams();
  useEffect(() => {
    const fetchQuestions = async () => {
      const res = await axios.get(`http://localhost:5000/questions/${category}?subtopic=${subtopic}`);
      setQuestions(res.data);
    };

    fetchQuestions();
  }, [category, subtopic]);
  
 // const { category } = useParams();
  // update 5 : end
  const [questions, setQuestions] = useState([]);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [score, setScore] = useState(0);
  const [showResult, setShowResult] = useState(false);
  const [correctAnswers, setCorrectAnswers] = useState(0);
  const [wrongAnswers, setWrongAnswers] = useState(0);
  const [timeLeft, setTimeLeft] = useState(60); // Set timer to 60 seconds can be adjestd as needed(adjust as needed)
  const [attemptedQuestions, setAttemptedQuestions] = useState([]);
  const [fullScreenWarnings, setFullScreenWarnings] = useState(0); // Track the number of full-screen exits
  const [isWarningVisible, setIsWarningVisible] = useState(false); // Control visibility of warning
  const navigate = useNavigate();
  

  useEffect(() => {
    const fetchQuestions = async () => {
      const res = await axios.get(`http://localhost:5000/questions/${category}`);
      setQuestions(res.data);
    };
    fetchQuestions();
    enterFullScreen();
    monitorFullScreenExit();
  }, [category]);

  useEffect(() => {
    if (timeLeft > 0) {
      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
      return () => clearTimeout(timer);
    } else {
      handleQuizSubmit();
    }
  }, [timeLeft]);

  // Handle when a question is answered
  const handleAnswerOptionClick = (option) => {
    if (!attemptedQuestions.includes(currentQuestion)) {
      setAttemptedQuestions([...attemptedQuestions, currentQuestion]);
    }

    if (option === questions[currentQuestion].answer) {
      setScore(score + 1);
      setCorrectAnswers(correctAnswers + 1);
    } else {
      setWrongAnswers(wrongAnswers + 1);
    }

    const nextQuestion = currentQuestion + 1;
    if (nextQuestion < questions.length) {
      setCurrentQuestion(nextQuestion);
    }
  };

  const handleQuestionNavigation = (index) => {
    setCurrentQuestion(index);
  };

  const saveProgress = async () => {
    const token = localStorage.getItem('token');
    await axios.post(
      'http://localhost:5000/save-progress',
      {
        category,
        correctAnswers,
        wrongAnswers,
      },
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );
  };

  // Restart the quiz
  const restartQuiz = () => {
    setCurrentQuestion(0);
    setScore(0);
    setShowResult(false);
    setAttemptedQuestions([]);
    setTimeLeft(60); // Reset timer to 60 seconds (adjust as needed)
    navigate('/');
  };

  // Handle quiz submission
  const handleQuizSubmit = () => {
    setShowResult(true);
    saveProgress();
    exitFullScreen();
  };

  // Enter full screen mode
  const enterFullScreen = () => {
    const elem = document.documentElement;
    if (elem.requestFullscreen) {
      elem.requestFullscreen();
    } else if (elem.mozRequestFullScreen) { /* Firefox */
      elem.mozRequestFullScreen();
    } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari & Opera */
      elem.webkitRequestFullscreen();
    } else if (elem.msRequestFullscreen) { /* IE/Edge */
      elem.msRequestFullscreen();
    }
  };

  // Exit full screen mode
  const exitFullScreen = () => {
    if (document.exitFullscreen) {
      document.exitFullscreen();
    } else if (document.mozCancelFullScreen) { /* Firefox */
      document.mozCancelFullScreen();
    } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */
      document.webkitExitFullscreen();
    } else if (document.msExitFullscreen) { /* IE/Edge */
      document.msExitFullscreen();
    }
  };

  // Monitor full-screen mode changes
  const monitorFullScreenExit = () => {
    document.addEventListener('fullscreenchange', checkFullScreenExit);
    document.addEventListener('webkitfullscreenchange', checkFullScreenExit);
    document.addEventListener('mozfullscreenchange', checkFullScreenExit);
    document.addEventListener('MSFullscreenChange', checkFullScreenExit);
  };

  // Check if the user has exited full-screen mode
  const checkFullScreenExit = () => {
    if (!document.fullscreenElement && !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement) {
      handleFullScreenExit();
    }
  };

  // Handle full-screen exit event
  const handleFullScreenExit = () => {
    setFullScreenWarnings((prevWarnings) => {
      const newWarnings = prevWarnings + 1;
      setIsWarningVisible(true);

      // Hide the warning after 2 seconds
      setTimeout(() => {
        setIsWarningVisible(false);
      }, 2000);

      // Automatically submit the quiz if the user exits full-screen more than twice
      if (newWarnings > 0) {
        handleQuizSubmit();
      }
      return newWarnings;
    });
  };

  const totalQuestions = questions.length;
  const attemptedCount = attemptedQuestions.length;
  const unattemptedCount = totalQuestions - attemptedCount;

  return (
    <div className="quiz-container">
      {showResult ? (
        <div className="result-section">
          <h1>Your Score: {score}</h1>
          <button className="restart-button" onClick={restartQuiz}>
            Restart Quiz
          </button>
        </div>
      ) : (
        <div className="quiz-content">
          {isWarningVisible && (
            <div className="warning-message">
              <p>Warning: Please stay in full-screen mode! {fullScreenWarnings}/2 warnings</p>
            </div>
          )}
          <div className="left-sidebar">
            <h3>Questions</h3>
            <ul className="question-list">
              {questions.map((_, index) => (
                <li key={index}>
                  <button
                    className={`question-number ${
                      attemptedQuestions.includes(index) ? 'attempted' : ''
                    }`}
                    onClick={() => handleQuestionNavigation(index)}
                  >
                    {index + 1}
                  </button>
                </li>
              ))}
            </ul>
            <div className="stats">
              <p>Attempted: {attemptedCount}</p>
              <p>Unattempted: {unattemptedCount}</p>
            </div>
          </div>
          <div className="question-section">
            {questions.length > 0 && (
              <>
                <h1 className="question-text">
                  {questions[currentQuestion].question}
                </h1>
                <div className="timer">Time Left: {timeLeft} seconds</div>
                <div className="options-container">
                  {questions[currentQuestion].options.map((option, index) => (
                    <button
                      key={index}
                      className="option-button"
                      onClick={() => handleAnswerOptionClick(option)}
                    >
                      {option}
                    </button>
                  ))}
                </div>
                <button className="submit-button" onClick={handleQuizSubmit}>
                  Submit Quiz
                </button>
              </>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default Quiz;

quiz.css
.quiz-container {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  padding: 20px;
  background-color: #f5f5f5;
  min-height: 100vh;
  font-family: 'Roboto', sans-serif;
}

/* Left Sidebar */
.left-sidebar {
  width: 20%;
  background-color: #f0f0f0;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.left-sidebar h3 {
  font-size: 20px;
  margin-bottom: 15px;
  color: #333;
}

.question-list {
  list-style-type: none;
  padding: 0;
  margin: 0;
}

.question-list li {
  margin-bottom: 10px;
}

.question-number {
  background-color: #3498db;
  color: white;
  border: none;
  padding: 10px 15px;
  border-radius: 50%;
  cursor: pointer;
  transition: background-color 0.3s ease;
  font-weight: bold;
  font-size: 16px;
}

.question-number:hover {
  background-color: #2980b9;
}

.question-number.attempted {
  background-color: #2ecc71;
  color: white;
}

.stats {
  margin-top: 20px;
  padding: 10px;
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.stats p {
  margin: 10px 0;
  font-size: 16px;
  color: #555;
}

/* Question Section */
.question-section {
  flex: 1;
  padding: 20px;
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  margin-left: 20px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.question-text {
  font-size: 22px;
  margin-bottom: 20px;
  color: #333;
}

.timer {
  font-size: 18px;
  color: #e74c3c;
  margin-bottom: 20px;
}

.options-container {
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-gap: 15px;
  margin-bottom: 20px;
}

.option-button {
  background-color: #3498db;
  color: white;
  padding: 12px;
  border: none;
  border-radius: 8px;
  font-size: 18px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.option-button:hover {
  background-color: #2980b9;
}

.submit-button {
  background-color: #a545a5;
  color: white;
  padding: 15px 20px;
  border: none;
  border-radius: 8px;
  font-size: 18px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.submit-button:hover {
  background-color: #c0392b;
}

/* Result Section */
.result-section {
  text-align: center;
  margin: auto;
}

.result-section h1 {
  font-size: 36px;
  color: #6c60b0;
}

.restart-button {
  background-color: #9a3ba2;
  color: white;
  padding: 15px 20px;
  border: none;
  border-radius: 8px;
  font-size: 18px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.restart-button:hover {
  background-color: #850af8;
}

/* Warning Message */
.warning-message {
  position: fixed;
  top: 10px;
  left: 50%;
  transform: translateX(-50%);
  background-color: #e74c3c;
  color: white;
  padding: 10px 20px;
  border-radius: 8px;
  font-size: 18px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  animation: fadeInOut 4s ease;
  z-index: 100;
}

@keyframes fadeInOut {
  0% {
    opacity: 0;
  }
  10% {
    opacity: 1;
  }
  90% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}

/* Animations */
@keyframes pulse {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
  100% {
    transform: scale(1);
  }
}

.option-button:hover {
  animation: pulse 0.3s ease;
}

/* Responsive Design */
@media screen and (max-width: 768px) {
  .quiz-container {
    display: flex;
    justify-content: center;
    padding: 20px;
    background-color: #f5f5f5;
    min-height: 100vh;
    font-family: 'Roboto', sans-serif;
  }
  
  .left-sidebar {
    width: 15%;
    background-color: #f0f0f0;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    position: fixed;
    left: 0;
    top: 0;
    bottom: 0;
  }

  .question-section {
    width: 60%; /* Centers the quiz section */
    margin-left: 20%;
    padding: 20px;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
}
