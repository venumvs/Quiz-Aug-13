// import React, { useEffect, useState } from 'react';
// import { useNavigate } from 'react-router-dom';
// import axios from 'axios';

// const Dashboard = () => {
//   const [categories, setCategories] = useState([]);
//   const navigate = useNavigate();
//   const token = localStorage.getItem('token');

//   useEffect(() => {
//     if (!token) {
//       navigate('/login'); // Redirect to login if not authenticated
//       return;
//     }

//     const fetchCategories = async () => {
//       const res = await axios.get('http://localhost:5000/categories', {
//         headers: {
//           Authorization: `Bearer ${token}`,
//         },
//       });
//       setCategories(res.data);
//     };

//     fetchCategories();
//   }, [token, navigate]);

//   const handleCategoryClick = (category) => {
//     navigate(`/quiz/${category}`);
//   };

//   return (
//     <div className="dashboard">
//       <h1 className="title">Quiz Categories</h1>
//       <div className="category-grid">
//         {categories.map((category) => (
//           <div key={category} className="category-card" onClick={() => handleCategoryClick(category)}>
//             <h2 className="category-name">{category}</h2>
//           </div>
//         ))}
//       </div>
//     </div>
//   );
// };

// export default Dashboard;

import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';

const Dashboard = () => {
  const [categories, setCategories] = useState([]);
  const navigate = useNavigate();
  const token = localStorage.getItem('token');

  useEffect(() => {
    if (!token) {
      navigate('/login'); // Redirect to login if not authenticated
      return;
    }

    const fetchCategories = async () => {
      const res = await axios.get('http://localhost:5000/categories', {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      setCategories(res.data);
    };

    fetchCategories();
  }, [token, navigate]);

  const handleCategoryClick = (category) => {
    navigate(`/quiz/${category}`);
  };

  return (
    <div className="dashboard">
      <h1 className="title">Quiz Categories</h1>
      <div className="category-grid">
        {categories.map((category) => (
          <div key={category} className="category-card" onClick={() => handleCategoryClick(category)}>
            {/* Placeholder for Image */}
            <div className="category-image">
              {/* If you have actual image URLs, you can use an <img> tag here */}
              {category.image ? (
                <img src={category.image} alt={`${category} image`} />
              ) : (
                category /* Text placeholder */
              )}
            </div>
            <h2 className="category-name">{category}</h2>
          </div>
        ))}
      </div>
    </div>
  );
};

export default Dashboard;







.quiz-container {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  padding: 20px;
  background-color: #f5f5f5;
  min-height: 100vh;
  font-family: 'Roboto', sans-serif;
}

/* Left Sidebar */
.left-sidebar {
  width: 20%;
  background-color: #f0f0f0;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.left-sidebar h3 {
  font-size: 20px;
  margin-bottom: 15px;
  color: #333;
}

.question-list {
  list-style-type: none;
  padding: 0;
  margin: 0;
}

.question-list li {
  margin-bottom: 10px;
}

.question-number {
  background-color: #3498db;
  color: white;
  border: none;
  padding: 10px 15px;
  border-radius: 50%;
  cursor: pointer;
  transition: background-color 0.3s ease;
  font-weight: bold;
  font-size: 16px;
}

.question-number:hover {
  background-color: #2980b9;
}

.question-number.attempted {
  background-color: #2ecc71;
  color: white;
}

.stats {
  margin-top: 20px;
  padding: 10px;
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.stats p {
  margin: 10px 0;
  font-size: 16px;
  color: #555;
}

/* Question Section */
/* Question Section */
.question-section {
  flex: 1;
  padding: 20px;
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  margin-left: 20px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  height: 300px; /* Set a fixed height */
  overflow:hidden; /* Prevent any overflow from changing the box size */
}

/* Question Text */
.question-text{
  font-size: 22px;
  color: #333;
  max-height: 150px; /* Set max height for question text */
  overflow-y: auto; /* Enable scrolling within the text area if it overflows */
  margin-bottom: 20px;
}

/* Timer */
.timer {
  font-size: 18px;
  color: #e74c3c;
  margin-bottom: 20px;
}

/* Options Container */
.options-container {
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-gap: 15px;
  margin-bottom: 20px;
}

/* Option Button */
.option-button {
  background-color: #3498db;
  color: white;
  padding: 12px;
  border: none;
  border-radius: 8px;
  font-size: 18px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.option-button:hover {
  background-color: #2980b9;
}

/* Submit Button */
.submit-button {
  background-color: #a545a5;
  color: white;
  padding: 15px 20px;
  border: none;
  border-radius: 8px;
  font-size: 18px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.submit-button:hover {
  background-color: #c0392b;
}


/* Result Section */
.result-section {
  text-align: center;
  margin: auto;
}

.result-section h1 {
  font-size: 36px;
  color: #6c60b0;
}

.restart-button {
  background-color: #9a3ba2;
  color: white;
  padding: 15px 20px;
  border: none;
  border-radius: 8px;
  font-size: 18px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.restart-button:hover {
  background-color: #850af8;
}

/* Warning Message */
.warning-message {
  position: fixed;
  top: 10px;
  left: 50%;
  transform: translateX(-50%);
  background-color: #e74c3c;
  color: white;
  padding: 10px 20px;
  border-radius: 8px;
  font-size: 18px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  animation: fadeInOut 4s ease;
  z-index: 100;
}

@keyframes fadeInOut {
  0% {
    opacity: 0;
  }
  10% {
    opacity: 1;
  }
  90% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}

/* Animations */
@keyframes pulse {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
  100% {
    transform: scale(1);
  }
}

.option-button:hover {
  animation: pulse 0.3s ease;
}

/* Responsive Design */
@media screen and (max-width: 768px) {
  .quiz-container {
    display: flex;
    justify-content: center;
    padding: 20px;
    background-color: #f5f5f5;
    min-height: 100vh;
    font-family: 'Roboto', sans-serif;
  }
  
  .left-sidebar {
    width: 15%;
    background-color: #f0f0f0;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    position: fixed;
    left: 0;
    top: 0;
    bottom: 0;
    
  }

  
}






.quiz-container {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  padding: 20px;
  background-color: #f5f5f5;
  min-height: 100vh;
  font-family: 'Roboto', sans-serif;
}

/* Left Sidebar */
.left-sidebar {
  width: 20%;
  background-color: #f0f0f0;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.left-sidebar h3 {
  font-size: 20px;
  margin-bottom: 15px;
  color: #333;
}

.question-list {
  list-style-type: none;
  padding: 0;
  margin: 0;
}

.question-list li {
  margin-bottom: 10px;
}

.question-number {
  background-color: #3498db;
  color: white;
  border: none;
  padding: 10px 15px;
  border-radius: 50%;
  cursor: pointer;
  transition: background-color 0.3s ease;
  font-weight: bold;
  font-size: 16px;
}

.question-number:hover {
  background-color: #2980b9;
}

.question-number.attempted {
  background-color: #2ecc71;
  color: white;
}

.stats {
  margin-top: 20px;
  padding: 10px;
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.stats p {
  margin: 10px 0;
  font-size: 16px;
  color: #555;
}

/* Question Section */
/* Question Section */
.question-section {
  flex: 1;
  padding: 20px;
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  margin-left: 20px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  height: 300px; /* Set a fixed height */
  overflow:hidden; /* Prevent any overflow from changing the box size */
}

/* Question Text */
.question-text{
  font-size: 22px;
  color: #333;
  max-height: 150px; /* Set max height for question text */
  overflow-y: auto; /* Enable scrolling within the text area if it overflows */
  margin-bottom: 20px;
}

/* Timer */
.timer {
  font-size: 18px;
  color: #e74c3c;
  margin-bottom: 20px;
}

/* Options Container */
.options-container {
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-gap: 15px;
  margin-bottom: 20px;
}

/* Option Button */
.option-button {
  background-color: #3498db;
  color: white;
  padding: 12px;
  border: none;
  border-radius: 8px;
  font-size: 18px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.option-button:hover {
  background-color: #2980b9;
}

/* Submit Button */
.submit-button {
  background-color: #a545a5;
  color: white;
  padding: 15px 20px;
  border: none;
  border-radius: 8px;
  font-size: 18px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.submit-button:hover {
  background-color: #c0392b;
}


/* Result Section */
.result-section {
  text-align: center;
  margin: auto;
}

.result-section h1 {
  font-size: 36px;
  color: #6c60b0;
}

.restart-button {
  background-color: #9a3ba2;
  color: white;
  padding: 15px 20px;
  border: none;
  border-radius: 8px;
  font-size: 18px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.restart-button:hover {
  background-color: #850af8;
}

/* Warning Message */
.warning-message {
  position: fixed;
  top: 10px;
  left: 50%;
  transform: translateX(-50%);
  background-color: #e74c3c;
  color: white;
  padding: 10px 20px;
  border-radius: 8px;
  font-size: 18px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  animation: fadeInOut 4s ease;
  z-index: 100;
}

@keyframes fadeInOut {
  0% {
    opacity: 0;
  }
  10% {
    opacity: 1;
  }
  90% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}

/* Animations */
@keyframes pulse {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
  100% {
    transform: scale(1);
  }
}

.option-button:hover {
  animation: pulse 0.3s ease;
}

/* Responsive Design */
@media screen and (max-width: 768px) {
  .quiz-container {
    display: flex;
    justify-content: center;
    padding: 20px;
    background-color: #f5f5f5;
    min-height: 100vh;
    font-family: 'Roboto', sans-serif;
  }
  
  .left-sidebar {
    width: 15%;
    background-color: #f0f0f0;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    position: fixed;
    left: 0;
    top: 0;
    bottom: 0;
    
  }

  
}
