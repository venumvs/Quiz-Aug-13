const express = require('express')
const mongoose  = require('mongoose')
const cors = require('cors')
const bodyParser = require('body-parser')
const app = express()
const PORT = 5000;

//middlewares
app.use(cors())
app.use(bodyParser.json())

mongoose.connect('mongodb://localhost:27017/demo2',{
    useNewUrlParser:true, //used to create connection
    useUnifiedTopology:true
})

const questionSchema = new mongoose.Schema({    // creates a schema or a structure 
    question : String,
    options : [String],
    answer : String,
    category : String  
})

const Question = mongoose.model('question',questionSchema) //creates a model - can use model to insert values into the db

/*app.post('/add-question',async (req,res) => {
    const{question,options,answer,category} = req.body;
    const newQuestion =await Question.create({
        question:question,
        options:[],
        answer:answer,
        category:category 
    })
    for(let opt in options){
        newQuestion.options.push(opt);
    }
    await newQuestion.save() //save method means that data will be stored in the database
    res.send('Question added')
    
})*/
app.post('/add-question', async (req, res) => {
    const { question, options, answer, category } = req.body;
    const newQuestion = new Question({ question, options, answer, category });
    await newQuestion.save();
    res.send('Question added!');
  });
 
app.get('/questions/:category', async (req, res) => {
    const { category } = req.params;
    const questions = await Question.find({ category });
    res.json(questions);
});



app.listen(PORT, () => {
    console.log("hi")
})










import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';

const Quiz = () => {
  const { category } = useParams();
  const [questions, setQuestions] = useState([]);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [score, setScore] = useState(0);
  const [showResult, setShowResult] = useState(false);
  const [correctAnswers, setCorrectAnswers] = useState(0);
  const [wrongAnswers, setWrongAnswers] = useState(0);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchQuestions = async () => {
      const res = await axios.get(`http://localhost:5000/questions/${category}`);
      setQuestions(res.data);
    };
    fetchQuestions();
  }, [category]);

  const handleAnswerOptionClick = (option) => {
    if (option === questions[currentQuestion].answer) {
      setScore(score + 1);
      setCorrectAnswers(correctAnswers + 1);
    } else {
      setWrongAnswers(wrongAnswers + 1);
    }

    const nextQuestion = currentQuestion + 1;
    if (nextQuestion < questions.length) {
      setCurrentQuestion(nextQuestion);
    } else {
      setShowResult(true);
      saveProgress();
    }
  };

  const saveProgress = async () => {
    const token = localStorage.getItem('token');
    await axios.post(
      'http://localhost:5000/save-progress',
      {
        category,
        correctAnswers,
        wrongAnswers,
      },
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );
  };

  const restartQuiz = () => {
    setCurrentQuestion(0);
    setScore(0);
    setShowResult(false);
    navigate('/');
  };

  return (
    <div className="quiz-container">
      {showResult ? (
        <div className="result-section">
          <h1>Your Score: {score}</h1>
          <button className="restart-button" onClick={restartQuiz}>Restart Quiz</button>
        </div>
      ) : (
        <div className="question-section">
          {questions.length > 0 && (
            <>
              <h1 className="question-text">{questions[currentQuestion].question}</h1>
              <div className="options-container">
                {questions[currentQuestion].options.map((option, index) => (
                  <button key={index} className="option-button" onClick={() => handleAnswerOptionClick(option)}>
                    {option}
                  </button>
                ))}
              </div>
            </>
          )}
        </div>
      )}
    </div>
  );
};

export default Quiz;









import React, { useEffect, useState } from 'react';
import axios from 'axios';

const UserDashboard = () => {
  const [progress, setProgress] = useState([]);

  useEffect(() => {
    const fetchProgress = async () => {
      const token = localStorage.getItem('token');
      try {
        const res = await axios.get('http://localhost:5000/progress', {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        console.log(res.data); // Debug: Log the response data
        setProgress(res.data);
      } catch (error) {
        console.error('Error fetching progress:', error);
      }
    };

    fetchProgress();
  }, []);

  return (
    <div className="user-dashboard">
      <h1>Your Quiz Progress</h1>
      <table>
        <thead>
          <tr>
            <th>Category</th>
            <th>Correct Answers</th>
            <th>Wrong Answers</th>
            <th>Progress (%)</th>
          </tr>
        </thead>
        <tbody>
          {progress.map((item) => (
            <tr key={item._id}>
              <td>{item.category}</td>
              <td>{item.correctAnswers}</td>
              <td>{item.wrongAnswers}</td>
              <td>{((item.correctAnswers / (item.correctAnswers + item.wrongAnswers)) * 100).toFixed(2)}%</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default UserDashboard;















































// server.jsx
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bodyParser = require('body-parser');
const jwt = require('jsonwebtoken');
const secret = 'bc6245bb8f7b9f164101f07918dac4cd9eb0aac666aba5c8c8be370174c2369ae79b60b92d98ed20e54643fae0331845543b514a2772bbabc78cc6190045e21b';
const app = express();
const port = 5000;

app.use(cors());
app.use(bodyParser.json());

mongoose.connect('mongodb://localhost:27017/project2', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});
const userSchema =new mongoose.Schema({
  username:{type:String,unique:true},
  password:String
})
// const questionSchema = new mongoose.Schema({
//   question: String,
//   options: [String],
//   answer: String,
//   category: String,
// });

//update 1: start
const questionSchema = new mongoose.Schema({
  question: String,
  options: [String],
  answer: String,
  category: String,
  subtopic: String, // New field for subtopics
});
//update 1 : end

const User=mongoose.model('User', userSchema)
const Question = mongoose.model('Question', questionSchema);

app.post('/add-question', async (req, res) => {
  const { question, options, answer, category } = req.body;
  const newQuestion = new Question({ question, options, answer, category });
  await newQuestion.save();
  res.send('Question added!');
});

app.get('/categories', async (req, res) => {
  const categories = await Question.distinct('category');
  res.json(categories);
});

app.get('/questions', async (req, res) => {
  const questions = await Question.find();
  res.json(questions);
});

// update 4 : start
// app.get('/questions/:category', async (req, res) => {
//   const { category } = req.params;
//   const questions = await Question.find({ category });
//   res.json(questions);
// });
app.get('/questions/:category', async (req, res) => {
  const { category } = req.params;
  const { subtopic } = req.query; // Get optional subtopic from query

  const filter = { category };
  if (subtopic) filter.subtopic = subtopic; // Add subtopic to filter if provided

  const questions = await Question.find(filter);
  res.json(questions);
});
//update 4 : end

// Register
app.post('/register', async (req, res) => {
  const { username, password } = req.body;
  try {
    const newUser = new User({ username, password }); // Save plain text password
    await newUser.save();
    res.send('User registered!');
  } catch (error) {
    console.error('Registration error:', error);
    res.status(500).send('Error registering user');
  }
});

// Login
app.post('/login', async (req, res) => {
  const { username, password } = req.body;
  try {
    const user = await User.findOne({ username });
    if (!user || user.password !== password) {
      return res.status(401).send('Invalid credentials');
    }
    const token = jwt.sign({ userId: user._id }, secret, { expiresIn: '1h' });
    res.json({ token });
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).send('Error logging in');
  }
});

// Middleware to authenticate user
const authenticate = (req, res, next) => {
  const token = req.headers.authorization?.split(' ')[1];
  if (token) {
    jwt.verify(token, secret, (err, decoded) => {
      if (err) {
        return res.status(401).send('Unauthorized');
      } else {
        req.userId = decoded.userId;
        next();
      }
    });
  } else {
    res.status(401).send('Unauthorized');
  }
};

const progressSchema = new mongoose.Schema({
  userId: mongoose.Schema.Types.ObjectId,
  category: String,
  correctAnswers: Number,
  wrongAnswers: Number,
});

const Progress = mongoose.model('Progress', progressSchema);

app.post('/save-progress', authenticate, async (req, res) => {
  const { category, correctAnswers, wrongAnswers } = req.body;
  const progress = new Progress({
    userId: req.userId,
    category,
    correctAnswers,
    wrongAnswers,
  });
  await progress.save();
  res.send('Progress saved!');
});

app.get('/progress', authenticate, async (req, res) => {
  const progress = await Progress.find({ userId: req.userId });
  res.json(progress);
});

//update 2 : start
app.get('/subtopics/:category', async (req, res) => {
  const { category } = req.params;
  const subtopics = await Question.distinct('subtopic', { category });
  res.json(subtopics);
});
//update 2 : end

//update 6 : start
app.get('/subtopics/:category', async (req, res) => {
  const { category } = req.params;
  const subtopics = await Question.distinct('subtopic', { category }); // Adjust according to your schema
  res.json(subtopics);
});
//update 6 : end

app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});



// quiz .jsx 
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';

const Quiz = () => {
  //update 5 : start 
  const { category, subtopic } = useParams();
  useEffect(() => {
    const fetchQuestions = async () => {
      const res = await axios.get(`http://localhost:5000/questions/${category}?subtopic=${subtopic}`);
      setQuestions(res.data);
    };

    fetchQuestions();
  }, [category, subtopic]);
  
 // const { category } = useParams();
  // update 5 : end
  const [questions, setQuestions] = useState([]);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [score, setScore] = useState(0);
  const [showResult, setShowResult] = useState(false);
  const [correctAnswers, setCorrectAnswers] = useState(0);
  const [wrongAnswers, setWrongAnswers] = useState(0);
  const [timeLeft, setTimeLeft] = useState(60); // Set timer to 60 seconds can be adjestd as needed(adjust as needed)
  const [attemptedQuestions, setAttemptedQuestions] = useState([]);
  const [fullScreenWarnings, setFullScreenWarnings] = useState(0); // Track the number of full-screen exits
  const [isWarningVisible, setIsWarningVisible] = useState(false); // Control visibility of warning
  const navigate = useNavigate();
  

  useEffect(() => {
    const fetchQuestions = async () => {
      const res = await axios.get(`http://localhost:5000/questions/${category}`);
      setQuestions(res.data);
    };
    fetchQuestions();
    enterFullScreen();
    monitorFullScreenExit();
  }, [category]);

  useEffect(() => {
    if (timeLeft > 0) {
      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
      return () => clearTimeout(timer);
    } else {
      handleQuizSubmit();
    }
  }, [timeLeft]);

  // Handle when a question is answered
  const handleAnswerOptionClick = (option) => {
    if (!attemptedQuestions.includes(currentQuestion)) {
      setAttemptedQuestions([...attemptedQuestions, currentQuestion]);
    }

    if (option === questions[currentQuestion].answer) {
      setScore(score + 1);
      setCorrectAnswers(correctAnswers + 1);
    } else {
      setWrongAnswers(wrongAnswers + 1);
    }

    const nextQuestion = currentQuestion + 1;
    if (nextQuestion < questions.length) {
      setCurrentQuestion(nextQuestion);
    }
  };

  const handleQuestionNavigation = (index) => {
    setCurrentQuestion(index);
  };

  const saveProgress = async () => {
    const token = localStorage.getItem('token');
    await axios.post(
      'http://localhost:5000/save-progress',
      {
        category,
        correctAnswers,
        wrongAnswers,
      },
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );
  };

  // Restart the quiz
  const restartQuiz = () => {
    setCurrentQuestion(0);
    setScore(0);
    setShowResult(false);
    setAttemptedQuestions([]);
    setTimeLeft(60); // Reset timer to 60 seconds (adjust as needed)
    navigate('/');
  };

  // Handle quiz submission
  const handleQuizSubmit = () => {
    setShowResult(true);
    saveProgress();
    exitFullScreen();
  };

  // Enter full screen mode
  const enterFullScreen = () => {
    const elem = document.documentElement;
    if (elem.requestFullscreen) {
      elem.requestFullscreen();
    } else if (elem.mozRequestFullScreen) { /* Firefox */
      elem.mozRequestFullScreen();
    } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari & Opera */
      elem.webkitRequestFullscreen();
    } else if (elem.msRequestFullscreen) { /* IE/Edge */
      elem.msRequestFullscreen();
    }
  };

  // Exit full screen mode
  const exitFullScreen = () => {
    if (document.exitFullscreen) {
      document.exitFullscreen();
    } else if (document.mozCancelFullScreen) { /* Firefox */
      document.mozCancelFullScreen();
    } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */
      document.webkitExitFullscreen();
    } else if (document.msExitFullscreen) { /* IE/Edge */
      document.msExitFullscreen();
    }
  };

  // Monitor full-screen mode changes
  const monitorFullScreenExit = () => {
    document.addEventListener('fullscreenchange', checkFullScreenExit);
    document.addEventListener('webkitfullscreenchange', checkFullScreenExit);
    document.addEventListener('mozfullscreenchange', checkFullScreenExit);
    document.addEventListener('MSFullscreenChange', checkFullScreenExit);
  };

  // Check if the user has exited full-screen mode
  const checkFullScreenExit = () => {
    if (!document.fullscreenElement && !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement) {
      handleFullScreenExit();
    }
  };

  // Handle full-screen exit event
  const handleFullScreenExit = () => {
    setFullScreenWarnings((prevWarnings) => {
      const newWarnings = prevWarnings + 1;
      setIsWarningVisible(true);

      // Hide the warning after 2 seconds
      setTimeout(() => {
        setIsWarningVisible(false);
      }, 2000);

      // Automatically submit the quiz if the user exits full-screen more than twice
      if (newWarnings > 0) {
        handleQuizSubmit();
      }
      return newWarnings;
    });
  };

  const totalQuestions = questions.length;
  const attemptedCount = attemptedQuestions.length;
  const unattemptedCount = totalQuestions - attemptedCount;

  return (
    <div className="quiz-container">
      {showResult ? (
        <div className="result-section">
          <h1>Your Score: {score}</h1>
          <button className="restart-button" onClick={restartQuiz}>
            Restart Quiz
          </button>
        </div>
      ) : (
        <div className="quiz-content">
          {isWarningVisible && (
            <div className="warning-message">
              <p>Warning: Please stay in full-screen mode! {fullScreenWarnings}/2 warnings</p>
            </div>
          )}
          <div className="left-sidebar">
            <h3>Questions</h3>
            <ul className="question-list">
              {questions.map((_, index) => (
                <li key={index}>
                  <button
                    className={`question-number ${
                      attemptedQuestions.includes(index) ? 'attempted' : ''
                    }`}
                    onClick={() => handleQuestionNavigation(index)}
                  >
                    {index + 1}
                  </button>
                </li>
              ))}
            </ul>
            <div className="stats">
              <p>Attempted: {attemptedCount}</p>
              <p>Unattempted: {unattemptedCount}</p>
            </div>
          </div>
          <div className="question-section">
            {questions.length > 0 && (
              <>
                <h1 className="question-text">
                  {questions[currentQuestion].question}
                </h1>
                <div className="timer">Time Left: {timeLeft} seconds</div>
                <div className="options-container">
                  {questions[currentQuestion].options.map((option, index) => (
                    <button
                      key={index}
                      className="option-button"
                      onClick={() => handleAnswerOptionClick(option)}
                    >
                      {option}
                    </button>
                  ))}
                </div>
                <button className="submit-button" onClick={handleQuizSubmit}>
                  Submit Quiz
                </button>
              </>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default Quiz;
